//line parser/parser.rl:1
package parser

import (
	"fmt"

	log "github.com/cihub/seelog"
)

//line parser/parser.rl:10
//line parser/parser.go:15
var _sase_actions []byte = []byte{
	0, 1, 0, 2, 2, 1,
}

var _sase_key_offsets []int16 = []int16{
	0, 0, 5, 7, 9, 11, 13, 16,
	27, 31, 39, 46, 56, 64, 71, 82,
	86, 90, 92, 94, 96, 99, 107, 114,
	130, 138, 139, 147, 154, 156, 158, 160,
	162, 164, 166, 168, 170, 172, 174, 177,
	184, 186, 199, 201, 213, 215, 216, 217,
	219, 224, 233, 251, 256, 265, 281, 294,
	295, 296, 305, 323, 332, 341, 359, 377,
	395, 413, 429, 441, 443, 448, 455, 463,
	473, 481, 488, 499, 510, 518, 525, 535,
	543, 550, 562, 567, 574, 582, 593, 604,
	612, 616, 624, 631, 641, 649, 656, 667,
	671, 676, 680, 690, 698, 708, 716, 723,
	735, 746, 757, 765, 772, 782, 790, 797,
	809, 814, 821, 825, 831, 834, 855, 870,
	874, 878, 884, 905, 928, 949, 969, 990,
	1015, 1034, 1059, 1086, 1111, 1135, 1160, 1189,
	1216, 1237, 1258, 1281, 1302, 1327, 1350,
}

var _sase_trans_keys []byte = []byte{
	32, 69, 101, 9, 13, 86, 118, 69,
	101, 78, 110, 84, 116, 32, 9, 13,
	32, 33, 65, 83, 95, 9, 13, 66,
	90, 97, 122, 32, 40, 9, 13, 32,
	95, 9, 13, 65, 90, 97, 122, 95,
	48, 57, 65, 90, 97, 122, 32, 95,
	9, 13, 48, 57, 65, 90, 97, 122,
	32, 95, 9, 13, 65, 90, 97, 122,
	95, 48, 57, 65, 90, 97, 122, 32,
	41, 95, 9, 13, 48, 57, 65, 90,
	97, 122, 32, 41, 9, 13, 72, 73,
	104, 105, 69, 101, 82, 114, 69, 101,
	32, 9, 13, 32, 95, 9, 13, 65,
	90, 97, 122, 95, 48, 57, 65, 90,
	97, 122, 32, 33, 46, 61, 95, 226,
	9, 13, 48, 57, 60, 62, 65, 90,
	97, 122, 32, 33, 61, 226, 9, 13,
	60, 62, 61, 32, 95, 9, 13, 65,
	90, 97, 122, 95, 48, 57, 65, 90,
	97, 122, 78, 110, 68, 100, 79, 111,
	84, 116, 82, 114, 73, 105, 84, 116,
	72, 104, 73, 105, 78, 110, 32, 9,
	13, 32, 43, 45, 9, 13, 48, 57,
	48, 57, 46, 72, 77, 78, 83, 85,
	104, 109, 110, 115, 117, 48, 57, 48,
	57, 72, 77, 78, 83, 85, 104, 109,
	110, 115, 117, 48, 57, 83, 115, 172,
	136, 167, 168, 95, 65, 90, 97, 122,
	78, 95, 110, 48, 57, 65, 90, 97,
	122, 32, 33, 46, 61, 68, 95, 100,
	226, 9, 13, 48, 57, 60, 62, 65,
	90, 97, 122, 95, 65, 90, 97, 122,
	32, 61, 95, 9, 13, 65, 90, 97,
	122, 32, 33, 46, 61, 95, 226, 9,
	13, 48, 57, 60, 62, 65, 90, 97,
	122, 32, 33, 61, 95, 226, 9, 13,
	60, 62, 65, 90, 97, 122, 137, 160,
	79, 95, 111, 48, 57, 65, 90, 97,
	122, 32, 33, 46, 61, 84, 95, 116,
	226, 9, 13, 48, 57, 60, 62, 65,
	90, 97, 122, 82, 95, 114, 48, 57,
	65, 90, 97, 122, 73, 95, 105, 48,
	57, 65, 90, 97, 122, 32, 33, 46,
	61, 84, 95, 116, 226, 9, 13, 48,
	57, 60, 62, 65, 90, 97, 122, 32,
	33, 46, 61, 72, 95, 104, 226, 9,
	13, 48, 57, 60, 62, 65, 90, 97,
	122, 32, 33, 46, 61, 73, 95, 105,
	226, 9, 13, 48, 57, 60, 62, 65,
	90, 97, 122, 32, 33, 46, 61, 78,
	95, 110, 226, 9, 13, 48, 57, 60,
	62, 65, 90, 97, 122, 32, 33, 46,
	61, 95, 226, 9, 13, 48, 57, 60,
	62, 65, 90, 97, 122, 32, 33, 43,
	45, 61, 226, 9, 13, 48, 57, 60,
	62, 136, 137, 95, 65, 90, 97, 122,
	95, 48, 57, 65, 90, 97, 122, 78,
	95, 48, 57, 65, 90, 97, 122, 32,
	95, 9, 13, 48, 57, 65, 90, 97,
	122, 32, 95, 9, 13, 65, 90, 97,
	122, 95, 48, 57, 65, 90, 97, 122,
	32, 89, 95, 9, 13, 48, 57, 65,
	90, 97, 122, 32, 40, 95, 9, 13,
	48, 57, 65, 90, 97, 122, 32, 95,
	9, 13, 65, 90, 97, 122, 95, 48,
	57, 65, 90, 97, 122, 32, 95, 9,
	13, 48, 57, 65, 90, 97, 122, 32,
	95, 9, 13, 65, 90, 97, 122, 95,
	48, 57, 65, 90, 97, 122, 32, 41,
	44, 95, 9, 13, 48, 57, 65, 90,
	97, 122, 32, 41, 44, 9, 13, 95,
	48, 57, 65, 90, 97, 122, 69, 95,
	48, 57, 65, 90, 97, 122, 32, 81,
	95, 9, 13, 48, 57, 65, 90, 97,
	122, 32, 40, 95, 9, 13, 48, 57,
	65, 90, 97, 122, 33, 41, 65, 95,
	66, 90, 97, 122, 32, 40, 9, 13,
	32, 95, 9, 13, 65, 90, 97, 122,
	95, 48, 57, 65, 90, 97, 122, 32,
	95, 9, 13, 48, 57, 65, 90, 97,
	122, 32, 95, 9, 13, 65, 90, 97,
	122, 95, 48, 57, 65, 90, 97, 122,
	32, 41, 95, 9, 13, 48, 57, 65,
	90, 97, 122, 32, 41, 9, 13, 32,
	41, 44, 9, 13, 32, 44, 9, 13,
	32, 33, 65, 95, 9, 13, 66, 90,
	97, 122, 78, 95, 48, 57, 65, 90,
	97, 122, 32, 95, 9, 13, 48, 57,
	65, 90, 97, 122, 32, 95, 9, 13,
	65, 90, 97, 122, 95, 48, 57, 65,
	90, 97, 122, 32, 41, 44, 95, 9,
	13, 48, 57, 65, 90, 97, 122, 32,
	89, 95, 9, 13, 48, 57, 65, 90,
	97, 122, 32, 40, 95, 9, 13, 48,
	57, 65, 90, 97, 122, 32, 95, 9,
	13, 65, 90, 97, 122, 95, 48, 57,
	65, 90, 97, 122, 32, 95, 9, 13,
	48, 57, 65, 90, 97, 122, 32, 95,
	9, 13, 65, 90, 97, 122, 95, 48,
	57, 65, 90, 97, 122, 32, 41, 44,
	95, 9, 13, 48, 57, 65, 90, 97,
	122, 32, 41, 44, 9, 13, 95, 48,
	57, 65, 90, 97, 122, 32, 59, 9,
	13, 32, 59, 87, 119, 9, 13, 32,
	9, 13, 32, 46, 59, 65, 78, 79,
	95, 97, 110, 111, 126, 194, 226, 9,
	13, 48, 57, 66, 90, 98, 122, 32,
	59, 65, 78, 79, 87, 97, 110, 111,
	119, 126, 194, 226, 9, 13, 32, 59,
	9, 13, 32, 59, 9, 13, 32, 59,
	83, 115, 9, 13, 32, 46, 59, 65,
	78, 79, 95, 97, 110, 111, 126, 194,
	226, 9, 13, 48, 57, 66, 90, 98,
	122, 32, 46, 59, 65, 68, 78, 79,
	95, 97, 100, 110, 111, 126, 194, 226,
	9, 13, 48, 57, 66, 90, 98, 122,
	32, 46, 59, 65, 78, 79, 95, 97,
	110, 111, 126, 194, 226, 9, 13, 48,
	57, 66, 90, 98, 122, 32, 59, 65,
	78, 79, 87, 95, 97, 110, 111, 119,
	126, 194, 226, 9, 13, 66, 90, 98,
	122, 32, 46, 59, 65, 78, 79, 95,
	97, 110, 111, 126, 194, 226, 9, 13,
	48, 57, 66, 90, 98, 122, 32, 33,
	46, 59, 61, 65, 78, 79, 95, 97,
	110, 111, 126, 194, 226, 9, 13, 48,
	57, 60, 62, 66, 90, 98, 122, 32,
	33, 59, 61, 65, 78, 79, 87, 97,
	110, 111, 119, 126, 194, 226, 9, 13,
	60, 62, 32, 33, 46, 59, 61, 65,
	78, 79, 95, 97, 110, 111, 126, 194,
	226, 9, 13, 48, 57, 60, 62, 66,
	90, 98, 122, 32, 33, 46, 59, 61,
	65, 68, 78, 79, 95, 97, 100, 110,
	111, 126, 194, 226, 9, 13, 48, 57,
	60, 62, 66, 90, 98, 122, 32, 33,
	46, 59, 61, 65, 78, 79, 95, 97,
	110, 111, 126, 194, 226, 9, 13, 48,
	57, 60, 62, 66, 90, 98, 122, 32,
	33, 59, 61, 65, 78, 79, 87, 95,
	97, 110, 111, 119, 126, 194, 226, 9,
	13, 60, 62, 66, 90, 98, 122, 32,
	33, 46, 59, 61, 65, 78, 79, 95,
	97, 110, 111, 126, 194, 226, 9, 13,
	48, 57, 60, 62, 66, 90, 98, 122,
	32, 33, 46, 59, 61, 65, 78, 79,
	82, 84, 95, 97, 110, 111, 114, 116,
	126, 194, 226, 9, 13, 48, 57, 60,
	62, 66, 90, 98, 122, 32, 33, 46,
	59, 61, 65, 78, 79, 82, 95, 97,
	110, 111, 114, 126, 194, 226, 9, 13,
	48, 57, 60, 62, 66, 90, 98, 122,
	32, 46, 59, 65, 78, 79, 95, 97,
	110, 111, 126, 194, 226, 9, 13, 48,
	57, 66, 90, 98, 122, 32, 46, 59,
	65, 78, 79, 95, 97, 110, 111, 126,
	194, 226, 9, 13, 48, 57, 66, 90,
	98, 122, 32, 46, 59, 65, 78, 79,
	82, 95, 97, 110, 111, 114, 126, 194,
	226, 9, 13, 48, 57, 66, 90, 98,
	122, 32, 46, 59, 65, 78, 79, 95,
	97, 110, 111, 126, 194, 226, 9, 13,
	48, 57, 66, 90, 98, 122, 32, 46,
	59, 65, 78, 79, 82, 84, 95, 97,
	110, 111, 114, 116, 126, 194, 226, 9,
	13, 48, 57, 66, 90, 98, 122, 32,
	46, 59, 65, 78, 79, 82, 95, 97,
	110, 111, 114, 126, 194, 226, 9, 13,
	48, 57, 66, 90, 98, 122, 32, 59,
	95, 9, 13, 48, 57, 65, 90, 97,
	122,
}

var _sase_single_lengths []byte = []byte{
	0, 3, 2, 2, 2, 2, 1, 5,
	2, 2, 1, 2, 2, 1, 3, 2,
	4, 2, 2, 2, 1, 2, 1, 6,
	4, 1, 2, 1, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 3,
	0, 11, 0, 10, 2, 1, 1, 0,
	1, 3, 8, 1, 3, 6, 5, 1,
	1, 3, 8, 3, 3, 8, 8, 8,
	8, 6, 6, 2, 1, 1, 2, 2,
	2, 1, 3, 3, 2, 1, 2, 2,
	1, 4, 3, 1, 2, 3, 3, 4,
	2, 2, 1, 2, 2, 1, 3, 2,
	3, 2, 4, 2, 2, 2, 1, 4,
	3, 3, 2, 1, 2, 2, 1, 4,
	3, 1, 2, 4, 1, 13, 13, 2,
	2, 4, 13, 15, 13, 14, 13, 15,
	15, 15, 17, 15, 16, 15, 19, 17,
	13, 13, 15, 13, 17, 15, 3,
}

var _sase_range_lengths []byte = []byte{
	0, 1, 0, 0, 0, 0, 1, 3,
	1, 3, 3, 4, 3, 3, 4, 1,
	0, 0, 0, 0, 1, 3, 3, 5,
	2, 0, 3, 3, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 2,
	1, 1, 1, 1, 0, 0, 0, 1,
	2, 3, 5, 2, 3, 5, 4, 0,
	0, 3, 5, 3, 3, 5, 5, 5,
	5, 5, 3, 0, 2, 3, 3, 4,
	3, 3, 4, 4, 3, 3, 4, 3,
	3, 4, 1, 3, 3, 4, 4, 2,
	1, 3, 3, 4, 3, 3, 4, 1,
	1, 1, 3, 3, 4, 3, 3, 4,
	4, 4, 3, 3, 4, 3, 3, 4,
	1, 3, 1, 1, 1, 4, 1, 1,
	1, 1, 4, 4, 4, 3, 4, 5,
	2, 5, 5, 5, 4, 5, 5, 5,
	4, 4, 4, 4, 4, 4, 4,
}

var _sase_index_offsets []int16 = []int16{
	0, 0, 5, 8, 11, 14, 17, 20,
	29, 33, 39, 44, 51, 57, 62, 70,
	74, 79, 82, 85, 88, 91, 97, 102,
	114, 121, 123, 129, 134, 137, 140, 143,
	146, 149, 152, 155, 158, 161, 164, 167,
	173, 175, 188, 190, 202, 205, 207, 209,
	211, 215, 222, 236, 240, 247, 259, 269,
	271, 273, 280, 294, 301, 308, 322, 336,
	350, 364, 376, 386, 389, 393, 398, 404,
	411, 417, 422, 430, 438, 444, 449, 456,
	462, 467, 476, 481, 486, 492, 500, 508,
	515, 519, 525, 530, 537, 543, 548, 556,
	560, 565, 569, 577, 583, 590, 596, 601,
	610, 618, 626, 632, 637, 644, 650, 655,
	664, 669, 674, 678, 684, 687, 705, 720,
	724, 728, 734, 752, 772, 790, 808, 826,
	847, 865, 886, 909, 930, 951, 972, 997,
	1020, 1038, 1056, 1076, 1094, 1116, 1136,
}

var _sase_indicies []byte = []byte{
	0, 2, 2, 0, 1, 3, 3, 1,
	4, 4, 1, 5, 5, 1, 6, 6,
	1, 7, 7, 1, 7, 8, 9, 11,
	10, 7, 10, 10, 1, 8, 12, 8,
	1, 12, 13, 12, 13, 13, 1, 14,
	14, 14, 14, 1, 15, 14, 15, 14,
	14, 14, 1, 15, 16, 15, 16, 16,
	1, 17, 17, 17, 17, 1, 18, 19,
	17, 18, 17, 17, 17, 1, 18, 19,
	18, 1, 20, 21, 20, 21, 1, 22,
	22, 1, 23, 23, 1, 24, 24, 1,
	25, 25, 1, 25, 26, 25, 26, 26,
	1, 27, 27, 27, 27, 1, 28, 29,
	30, 32, 27, 33, 28, 27, 31, 27,
	27, 1, 28, 29, 32, 33, 28, 31,
	1, 32, 1, 32, 34, 32, 34, 34,
	1, 35, 35, 35, 35, 1, 36, 36,
	1, 25, 25, 1, 37, 37, 1, 25,
	25, 1, 25, 25, 1, 21, 21, 1,
	38, 38, 1, 39, 39, 1, 40, 40,
	1, 41, 41, 1, 42, 42, 1, 42,
	43, 43, 42, 44, 1, 45, 1, 46,
	47, 48, 49, 47, 49, 47, 48, 49,
	47, 49, 45, 1, 50, 1, 47, 48,
	49, 47, 49, 47, 48, 49, 47, 49,
	50, 1, 47, 47, 1, 25, 1, 51,
	1, 25, 1, 34, 34, 34, 1, 52,
	27, 52, 27, 27, 27, 1, 28, 29,
	30, 32, 53, 27, 53, 33, 28, 27,
	31, 27, 27, 1, 26, 26, 26, 1,
	32, 32, 34, 32, 34, 34, 1, 54,
	29, 30, 32, 27, 33, 54, 27, 31,
	27, 27, 1, 54, 29, 32, 26, 33,
	54, 31, 26, 26, 1, 55, 1, 32,
	1, 56, 27, 56, 27, 27, 27, 1,
	28, 29, 30, 32, 53, 27, 53, 33,
	28, 27, 31, 27, 27, 1, 53, 27,
	53, 27, 27, 27, 1, 57, 27, 57,
	27, 27, 27, 1, 28, 29, 30, 32,
	58, 27, 58, 33, 28, 27, 31, 27,
	27, 1, 28, 29, 30, 32, 59, 27,
	59, 33, 28, 27, 31, 27, 27, 1,
	28, 29, 30, 32, 60, 27, 60, 33,
	28, 27, 31, 27, 27, 1, 28, 29,
	30, 32, 61, 27, 61, 33, 28, 27,
	31, 27, 27, 1, 62, 29, 30, 32,
	27, 33, 62, 27, 31, 27, 27, 1,
	62, 29, 43, 43, 32, 33, 62, 44,
	31, 1, 51, 55, 1, 63, 63, 63,
	1, 64, 64, 64, 64, 1, 66, 65,
	65, 65, 65, 1, 67, 65, 67, 65,
	65, 65, 1, 67, 68, 67, 68, 68,
	1, 69, 69, 69, 69, 1, 67, 70,
	65, 67, 65, 65, 65, 1, 67, 71,
	65, 67, 65, 65, 65, 1, 71, 72,
	71, 72, 72, 1, 73, 73, 73, 73,
	1, 74, 73, 74, 73, 73, 73, 1,
	74, 75, 74, 75, 75, 1, 76, 76,
	76, 76, 1, 77, 19, 71, 76, 77,
	76, 76, 76, 1, 77, 19, 71, 77,
	1, 65, 65, 65, 65, 1, 78, 65,
	65, 65, 65, 1, 67, 79, 65, 67,
	65, 65, 65, 1, 67, 80, 65, 67,
	65, 65, 65, 1, 81, 19, 82, 83,
	83, 83, 1, 81, 84, 81, 1, 84,
	85, 84, 85, 85, 1, 86, 86, 86,
	86, 1, 87, 86, 87, 86, 86, 86,
	1, 87, 88, 87, 88, 88, 1, 89,
	89, 89, 89, 1, 90, 91, 89, 90,
	89, 89, 89, 1, 90, 91, 90, 1,
	92, 19, 93, 92, 1, 92, 93, 92,
	1, 93, 81, 82, 83, 93, 83, 83,
	1, 95, 94, 94, 94, 94, 1, 96,
	94, 96, 94, 94, 94, 1, 96, 97,
	96, 97, 97, 1, 98, 98, 98, 98,
	1, 92, 19, 93, 98, 92, 98, 98,
	98, 1, 96, 99, 94, 96, 94, 94,
	94, 1, 96, 100, 94, 96, 94, 94,
	94, 1, 100, 101, 100, 101, 101, 1,
	102, 102, 102, 102, 1, 103, 102, 103,
	102, 102, 102, 1, 103, 104, 103, 104,
	104, 1, 105, 105, 105, 105, 1, 106,
	91, 100, 105, 106, 105, 105, 105, 1,
	106, 91, 100, 106, 1, 94, 94, 94,
	94, 1, 107, 108, 107, 1, 107, 108,
	109, 109, 107, 1, 108, 108, 1, 110,
	111, 108, 112, 113, 114, 35, 112, 113,
	114, 25, 115, 116, 110, 35, 35, 35,
	1, 110, 108, 117, 118, 119, 120, 117,
	118, 119, 120, 25, 115, 116, 110, 1,
	121, 122, 121, 1, 123, 108, 123, 1,
	121, 122, 47, 47, 121, 1, 110, 111,
	108, 112, 124, 114, 35, 112, 124, 114,
	25, 115, 116, 110, 35, 35, 35, 1,
	110, 111, 108, 112, 125, 113, 126, 35,
	112, 125, 113, 126, 25, 115, 116, 110,
	35, 35, 35, 1, 127, 111, 108, 128,
	130, 131, 129, 128, 130, 131, 25, 115,
	116, 127, 35, 129, 129, 1, 127, 108,
	132, 133, 134, 135, 26, 132, 133, 134,
	135, 25, 115, 116, 127, 26, 26, 1,
	110, 111, 108, 136, 137, 138, 64, 136,
	137, 138, 25, 115, 116, 110, 64, 64,
	64, 1, 139, 29, 140, 108, 32, 136,
	141, 138, 64, 136, 141, 138, 25, 115,
	142, 139, 64, 31, 64, 64, 1, 139,
	29, 108, 32, 117, 118, 119, 120, 117,
	118, 119, 120, 25, 115, 142, 139, 31,
	1, 139, 29, 140, 108, 32, 136, 137,
	138, 64, 136, 137, 138, 25, 115, 142,
	139, 64, 31, 64, 64, 1, 139, 29,
	140, 108, 32, 136, 143, 141, 144, 64,
	136, 143, 141, 144, 25, 115, 142, 139,
	64, 31, 64, 64, 1, 145, 29, 140,
	108, 32, 136, 141, 138, 64, 136, 141,
	138, 25, 115, 142, 145, 64, 31, 64,
	64, 1, 145, 29, 108, 32, 132, 133,
	134, 135, 26, 132, 133, 134, 135, 25,
	115, 142, 145, 31, 26, 26, 1, 139,
	29, 140, 108, 32, 136, 141, 144, 64,
	136, 141, 144, 25, 115, 142, 139, 64,
	31, 64, 64, 1, 139, 29, 140, 108,
	32, 136, 141, 138, 143, 143, 64, 136,
	141, 138, 143, 143, 25, 115, 142, 139,
	64, 31, 64, 64, 1, 139, 29, 140,
	108, 32, 136, 141, 138, 143, 64, 136,
	141, 138, 143, 25, 115, 142, 139, 64,
	31, 64, 64, 1, 110, 111, 108, 136,
	141, 138, 64, 136, 141, 138, 25, 115,
	116, 110, 64, 64, 64, 1, 110, 111,
	108, 136, 141, 144, 64, 136, 141, 144,
	25, 115, 116, 110, 64, 64, 64, 1,
	110, 111, 108, 136, 141, 138, 143, 64,
	136, 141, 138, 143, 25, 115, 116, 110,
	64, 64, 64, 1, 110, 111, 108, 112,
	113, 126, 35, 112, 113, 126, 25, 115,
	116, 110, 35, 35, 35, 1, 110, 111,
	108, 112, 113, 114, 125, 125, 35, 112,
	113, 114, 125, 125, 25, 115, 116, 110,
	35, 35, 35, 1, 110, 111, 108, 112,
	113, 114, 125, 35, 112, 113, 114, 125,
	25, 115, 116, 110, 35, 35, 35, 1,
	107, 108, 69, 107, 69, 69, 69, 1,
}

var _sase_trans_targs []byte = []byte{
	1, 0, 2, 3, 4, 5, 6, 7,
	8, 70, 83, 84, 9, 10, 11, 12,
	13, 14, 15, 114, 17, 34, 18, 19,
	20, 21, 22, 23, 24, 25, 51, 52,
	26, 55, 27, 117, 29, 31, 35, 36,
	37, 38, 39, 40, 41, 41, 42, 119,
	121, 44, 43, 47, 50, 53, 54, 56,
	58, 61, 62, 63, 64, 65, 66, 69,
	127, 71, 74, 72, 73, 142, 75, 76,
	77, 78, 79, 80, 81, 82, 85, 86,
	87, 88, 99, 113, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 100, 104,
	101, 102, 103, 105, 106, 107, 108, 109,
	110, 111, 112, 115, 116, 16, 118, 48,
	122, 139, 141, 45, 46, 28, 30, 32,
	33, 120, 116, 120, 123, 124, 140, 125,
	126, 136, 137, 138, 49, 57, 59, 60,
	129, 130, 135, 128, 68, 133, 67, 131,
	134, 132,
}

var _sase_trans_actions []byte = []byte{
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1, 1, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 3, 3, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0,
}

var _sase_eof_actions []byte = []byte{
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3,
	0, 3, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0,
}

const sase_start int = 1
const sase_first_final int = 114
const sase_error int = 0

const sase_en_Main int = 1

//line parser/parser.rl:11
func Parse(data string) (*Query, error) {
	result := &Query{}

	var (
		cs     int                      // current state
		p      int   = 0                // data offset
		pe     int   = len(data)        // data end offset
		eof    int   = pe               // eof offset
		marks  []int = make([]int, 100) // stacked marked positions
		tokens       = []*token{{
			Tt: ttRoot,
		}}
	)

	mark := func() {
		marks = append(marks, p)
	}

	unmark := func() {
		marks = marks[:len(marks)-1]
	}

	lastMark := func() int {
		return marks[len(marks)-1]
	}

	markedText := func() string {
		return data[lastMark():p]
	}

	startToken := func(tt tokenType) *token {
		log.Tracef("Start token %v", tt)
		t := &token{
			Tt: tt,
		}
		tokens = append(tokens, t)
		return t
	}

	endToken := func(tt tokenType) {
		lastT := tokens[len(tokens)-1]
		if lastT.Tt != tt {
			panic(fmt.Sprintf("%v != %v", tt, lastT.Tt))
		}
		log.Tracef("End token %v (val: %s)", tt, lastT.Value)
		tokens = tokens[:len(tokens)-1]
	}

	// Suppress "variable not used"
	var (
		_ = cs
		_ = p
		_ = pe
		_ = eof
		_ = marks
		_ = tokens
		_ = mark
		_ = unmark
		_ = lastMark
		_ = startToken
		_ = endToken
	)

//line parser/parser.go:563
	{
		cs = sase_start
	}

//line parser/parser.go:568
	{
		var _klen int
		var _trans int
		var _acts int
		var _nacts uint
		var _keys int
		if p == pe {
			goto _test_eof
		}
		if cs == 0 {
			goto _out
		}
	_resume:
		_keys = int(_sase_key_offsets[cs])
		_trans = int(_sase_index_offsets[cs])

		_klen = int(_sase_single_lengths[cs])
		if _klen > 0 {
			_lower := int(_keys)
			var _mid int
			_upper := int(_keys + _klen - 1)
			for {
				if _upper < _lower {
					break
				}

				_mid = _lower + ((_upper - _lower) >> 1)
				switch {
				case data[p] < _sase_trans_keys[_mid]:
					_upper = _mid - 1
				case data[p] > _sase_trans_keys[_mid]:
					_lower = _mid + 1
				default:
					_trans += int(_mid - int(_keys))
					goto _match
				}
			}
			_keys += _klen
			_trans += _klen
		}

		_klen = int(_sase_range_lengths[cs])
		if _klen > 0 {
			_lower := int(_keys)
			var _mid int
			_upper := int(_keys + (_klen << 1) - 2)
			for {
				if _upper < _lower {
					break
				}

				_mid = _lower + (((_upper - _lower) >> 1) & ^1)
				switch {
				case data[p] < _sase_trans_keys[_mid]:
					_upper = _mid - 2
				case data[p] > _sase_trans_keys[_mid+1]:
					_lower = _mid + 2
				default:
					_trans += int((_mid - int(_keys)) >> 1)
					goto _match
				}
			}
			_trans += _klen
		}

	_match:
		_trans = int(_sase_indicies[_trans])
		cs = int(_sase_trans_targs[_trans])

		if _sase_trans_actions[_trans] == 0 {
			goto _again
		}

		_acts = int(_sase_trans_actions[_trans])
		_nacts = uint(_sase_actions[_acts])
		_acts++
		for ; _nacts > 0; _nacts-- {
			_acts++
			switch _sase_actions[_acts-1] {
			case 0:
//line parser/parser.rl:76
				mark()
			case 1:
//line parser/parser.rl:77
				unmark()
			case 2:
//line parser/parser.rl:87
				t := startToken(ttDuration)
				t.Value = markedText()
				endToken(ttDuration)

//line parser/parser.go:660
			}
		}

	_again:
		if cs == 0 {
			goto _out
		}
		p++
		if p != pe {
			goto _resume
		}
	_test_eof:
		{
		}
		if p == eof {
			__acts := _sase_eof_actions[cs]
			__nacts := uint(_sase_actions[__acts])
			__acts++
			for ; __nacts > 0; __nacts-- {
				__acts++
				switch _sase_actions[__acts-1] {
				case 1:
//line parser/parser.rl:77
					unmark()
				case 2:
//line parser/parser.rl:87
					t := startToken(ttDuration)
					t.Value = markedText()
					endToken(ttDuration)

//line parser/parser.go:689
				}
			}
		}

	_out:
		{
		}
	}

//line parser/parser.rl:128

	if cs < sase_first_final {
		if p == pe {
			return nil, fmt.Errorf("Unexpected EOF")
		} else {
			return nil, fmt.Errorf("Error at position %d", p)
		}
	}

	return result, nil
}
